openapi: 3.0.0
info:
  title: Purr&Stay
  version: 1.0.0
  description: API для приложения Purr&Stay, которое помогает владельцам животных находить опекунов для передержки
servers:
  - url: https://api.purrandstay.com/v1
    description: Основной сервер API Purr&Stay

tags:
  - name: Authentication
    description: Вход и выбор роли
  - name: Card_Pets
    description: Операции с карточками животных
  - name: Card_Pet_sitter
    description: Операции с карточками опекунов
  - name: Booking
    description: Операции, связанные с бронированием передержки/опекунов
  - name: Scroll
    description: Операции, связанные с листанием карточек
  - name: Pet_Card
    description: Операции с карточками животных для опекунов
  - name: Pet_sitter_Card
    description: Операции с карточками опекунов для владельцев
    
components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
          enum: [owner, pet_sitter]
        first_name:
          type: string
        last_name:
          type: string
    Pet:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        type:
          type: string
          enum: [dog, cat, rodent, bird, fish, reptile, rabbit, ferret, hedgehog, other]
        age:
          type: integer
        description:
          type: string
        location:
          type: string
          description: Адрес проживания животного, запрашивается с разрешением пользователя через карты (например, Яндекс.Карты)
        photos:
          type: array
          items:
            type: string
            format: uri
          description: Ссылки на фотографии животного
        dietary_preferences:
          type: string
          enum: ["Сухой корм", "Мокрый корм", "Домашняя еда", "Специальная диета", "Никаких лакомств"]
        physical_activity:
          type: string
          enum: ["Ежедневные прогулки", "Активные игры", "Пробежки", "Минимальная активность", "Игры на свежем воздухе", "Без прогулок"]
        interaction_level:
          type: string
          enum: ["Высокий уровень общения", "Минимальный контакт с людьми", "Отсутствие других животных", "Контакт с детьми"]
        grooming:
          type: string
          enum: ["Регулярное вычесывание", "Купание", "Стрижка когтей", "Чистка ушей", "Уход за шерстью", "Чистка зубов", "Чистка глаз"]
        medications:
          type: string
          enum: ["Ежедневный прием лекарств", "Инъекции", "Витамины", "Антиаллергены"]
        treats:
          type: string
          enum: ["Овощи и фрукты", "Специальные лакомства для собак/кошек", "Лакомства запрещены", "Домашние лакомства"]
        game_preferences:
          type: string
          enum: ["Игры с мячом", "Погоня за игрушками", "Прятки", "Минимум активности", "Контактные игры"]
        feeding_schedule:
          type: string
          enum: ["Утро", "День", "Вечер", "Ночные кормления", "Свободный доступ к еде"]
        pet_rating:
          type: number
          format: float
        owner_rating:
          type: number
          format: float
    PetSitter:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        rating:
          type: number
          format: float
        location:
          type: string
          description: Геопозиция пользователя, запрашивается с разрешением пользователя через карты (например, Яндекс.Карты)
    Booking:
      type: object
      properties:
        pet_id:
          type: integer
        pet_sitter_id:
          type: integer
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        code:
          type: integer
          description: Код ошибки
        text:
          type: string
          description: Текст ошибки

paths:
  /auth/verify:
    post:
      tags:
        - Authentication
      summary: Подтверждение регистрации
      description: Подтверждает регистрацию пользователя с помощью кода, отправленного на электронную почту
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                verification_code:
                  type: string
              required:
                - email
                - verification_code
      responses:
        '200':
          description: Регистрация успешно подтверждена
        '400':
          description: Неверный код подтверждения или истек срок действия кода
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /application/pet:
    get:
      tags:
        - Scroll
      summary: Получение списка животных
      description: Возвращает список животных, доступных для передержки
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [dog, cat, rodent, bird, fish, reptile, rabbit, ferret, hedgehog, other]
          description: Фильтрация по типу животного
        - in: query
          name: location
          schema:
            type: string
          description: Геопозиция пользователя (запрашивается с разрешением пользователя через карты, например, Яндекс.Карты)
      responses:
        '200':
          description: Список животных успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '404':
          description: Ресурс не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Card_Pets
      summary: Создание карточки животного
      description: Создает новую карточку животного
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Карточка животного успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /application/pet/{id}:
    put:
      tags:
        - Card_Pets
      summary: Редактирование карточки животного
      description: Обновляет информацию о карточке животного
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Идентификатор животного
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Карточка животного успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Животное не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Card_Pets
      summary: Удаление карточки животного
      description: Удаляет карточку животного по идентификатору
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Идентификатор животного
      responses:
        '204':
          description: Карточка животного успешно удалена
        '404':
          description: Животное не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /application/pet_sitter:
    post:
      tags:
        - Card_Pet_sitter
      summary: Создание карточки опекуна
      description: Создает новую карточку опекуна
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetSitter'
      responses:
        '201':
          description: Карточка опекуна успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetSitter'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /application/pet_sitter/{id}:
    put:
      tags:
        - Card_Pet_sitter
      summary: Редактирование карточки опекуна
      description: Обновляет информацию о карточке опекуна
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Идентификатор опекуна
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetSitter'
      responses:
        '200':
          description: Карточка опекуна успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetSitter'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Опекун не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Card_Pet_sitter
      summary: Удаление карточки опекуна
      description: Удаляет карточку опекуна по идентификатору
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Идентификатор опекуна
      responses:
        '204':
          description: Карточка опекуна успешно удалена
        '404':
          description: Опекун не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

