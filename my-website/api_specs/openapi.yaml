openapi: 3.0.3
info:
  title: Purr&Stay
  description: API для регистрации пользователей, управления питомцами, бронирования услуг сиделок и других связанных операций.
  version: 0.4.3
servers:
  - url: https://api.purrandstay.com/v1
    description: Основной сервер API

paths:
  /register:
    post:
      summary: Регистрация нового пользователя
      description: Создает нового пользователя в системе.
      tags:
        - Аутентификация
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Пользователь с таким email уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pet_sitters_feed:
    get:
      summary: Лента опекунов
      description: Возвращает список всех опекунов (карточек опекунов), доступных в системе, с поддержкой пагинации.
      tags:
        - Пользователи
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Максимальное количество опекунов для возврата
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Смещение для пагинации опекунов (сколько пропустить)
      responses:
        '200':
          description: Список опекунов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetSitterResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pet_holding_cards_feed:
    get:
      summary: Лента карточек передержки
      description: Возвращает список всех карточек передержки животных, доступных в системе, с поддержкой пагинации.
      tags:
        - Карточки передержки
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Максимальное количество карточек передержки для возврата
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Смещение для пагинации карточек передержки (сколько пропустить)
      responses:
        '200':
          description: Список карточек передержки успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetHoldingCardDetailedResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pet_sitter:
    post:
      summary: Добавление новой карточки опекуна
      description: Создает новую карточку опекуна, связывая пользователя с ролью опекуна.
      tags:
        - Пользователи
      security:
        - SessionIdAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetSitterCreateRequest'
      responses:
        '201':
          description: Карточка опекуна успешно создана
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Карточка опекуна для данного пользователя уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pet_sitter/{userId}:
    get:
      summary: Получение информации по конкретному опекуну
      description: Возвращает информацию о конкретном опекуну по его идентификатору.
      tags:
        - Пользователи
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор пользователя
      responses:
        '200':
          description: Информация об опекуне успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetSitterResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Опекун не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Редактирование карточки опекуна
      description: Обновляет информацию о карточке опекуна.
      tags:
        - Пользователи
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetSitterUpdateRequest'
      responses:
        '200':
          description: Карточка опекуна успешно обновлена
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Карточка опекуна не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удаление карточки опекуна
      description: Удаляет карточку опекуна по идентификатору пользователя.
      tags:
        - Пользователи
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор пользователя
      responses:
        '204':
          description: Карточка опекуна успешно удалена
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Карточка опекуна не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /animals:
    post:
      summary: Добавление нового животного
      description: Создает новую запись о животном, принадлежащем пользователю.
      tags:
        - Питомцы
      security:
        - SessionIdAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalCreateRequest'
      responses:
        '201':
          description: Животное успешно добавлено
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Получение списка животных пользователя
      description: Возвращает список всех животных, принадлежащих аутентифицированному пользователю.
      tags:
        - Питомцы
      security:
        - SessionIdAuth: []
      responses:
        '200':
          description: Список животных успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /animals/{animalId}:
    get:
      summary: Получение информации о животном
      description: Возвращает подробную информацию о конкретном животном.
      tags:
        - Питомцы
      parameters:
        - in: path
          name: animalId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор животного
      responses:
        '200':
          description: Информация о животном успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Животное не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Обновление информации о животном
      description: Обновляет данные о конкретном животном.
      tags:
        - Питомцы
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: animalId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор животного
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalUpdateRequest'
      responses:
        '200':
          description: Информация о животном успешно обновлена
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Животное не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удаление животного
      description: Удаляет запись о животном по его идентификатору.
      tags:
        - Питомцы
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: animalId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор животного
      responses:
        '204':
          description: Животное успешно удалено
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Животное не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pet_holding_cards:
    post:
      summary: Создание карточки передержки животного
      description: Создает новую карточку передержки для указанного животного.
      tags:
        - Карточки передержки
      security:
        - SessionIdAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetHoldingCardCreateRequest'
      responses:
        '201':
          description: Карточка передержки успешно создана
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Животное не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Получение списка карточек передержки пользователя
      description: Возвращает список всех карточек передержки, связанных с аутентифицированным пользователем.
      tags:
        - Карточки передержки
      security:
        - SessionIdAuth: []
      responses:
        '200':
          description: Список карточек передержки успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetHoldingCardResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /pet_holding_cards/{holdingCardId}:
    get:
      summary: Получение информации о карточке передержки животного
      description: Возвращает информацию о конкретной карточке передержки животного, включая данные о животном и его хозяине.
      tags:
        - Карточки передержки
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: holdingCardId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор карточки передержки
      responses:
        '200':
          description: Информация о карточке передержки успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetHoldingCardDetailedResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Карточка передержки не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Обновление карточки передержки животного
      description: Обновляет информацию о существующей карточке передержки.
      tags:
        - Карточки передержки
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: holdingCardId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор карточки передержки
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetHoldingCardUpdateRequest'
      responses:
        '200':
          description: Карточка передержки успешно обновлена
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Карточка передержки не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удаление карточки передержки животного
      description: Удаляет существующую карточку передержки по ее идентификатору.
      tags:
        - Карточки передержки
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: holdingCardId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор карточки передержки
      responses:
        '204':
          description: Карточка передержки успешно удалена
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Карточка передержки не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings:
    post:
      summary: Создание бронирования
      description: Создает новое бронирование между опекуном и карточкой передержки животного.
      tags:
        - Бронирования
      security:
        - SessionIdAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingCreateRequest'
      responses:
        '201':
          description: Бронирование успешно создано
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Карточка передержки или опекун не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Получение списка текущих бронирований
      description: Возвращает список всех текущих бронирований для аутентифицированного пользователя.
      tags:
        - Бронирования
      security:
        - SessionIdAuth: []
      responses:
        '200':
          description: Список бронирований успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bookings/{bookingId}:
    get:
      summary: Получение информации о бронировании
      description: Возвращает информацию о конкретном бронировании, включая данные о карточке передержки, животном и опекуне.
      tags:
        - Бронирования
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор бронирования
      responses:
        '200':
          description: Информация о бронировании успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDetailedResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Бронирование не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удаление бронирования
      description: Удаляет существующее бронирование по его идентификатору.
      tags:
        - Бронирования
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор бронирования
      responses:
        '204':
          description: Бронирование успешно удалено
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Бронирование не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews:
    post:
      summary: Создание отзыва
      description: Создает новый отзыв между пользователем и опекуном после завершения бронирования.
      tags:
        - Отзывы
      security:
        - SessionIdAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreateRequest'
      responses:
        '201':
          description: Отзыв успешно создан
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Бронирование или пользователь не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews/{reviewId}:
    get:
      summary: Получение конкретного отзыва
      description: Возвращает информацию о конкретном отзыве по его идентификатору.
      tags:
        - Отзывы
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор отзыва
      responses:
        '200':
          description: Информация об отзыве успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Отзыв не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Удаление отзыва
      description: Удаляет существующий отзыв по его идентификатору. Только автор отзыва может удалить его.
      tags:
        - Отзывы
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор отзыва
      responses:
        '204':
          description: Отзыв успешно удален
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Отзыв не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chats:
    post:
      summary: Создание нового чата
      description: Создает новый чат между аутентифицированным пользователем и другим пользователем.
      tags:
        - Чаты
      security:
        - SessionIdAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCreateRequest'
      responses:
        '201':
          description: Чат успешно создан
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Пользователь для чата не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Получение всех чатов пользователя
      description: Возвращает список всех чатов, в которых участвует аутентифицированный пользователь.
      tags:
        - Чаты
      security:
        - SessionIdAuth: []
      responses:
        '200':
          description: Список чатов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chats/{chatId}:
    delete:
      summary: Удаление чата
      description: Удаляет существующий чат по его идентификатору. Только участники чата могут удалить его.
      tags:
        - Чаты
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор чата
      responses:
        '204':
          description: Чат успешно удален
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: У пользователя нет прав на удаление этого чата
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Чат не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chats/{chatId}/messages:
    get:
      summary: Получение сообщений в чате
      description: Возвращает список всех сообщений в указанном чате.
      tags:
        - Чаты
      security:
        - SessionIdAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
            format: uuid
          description: Уникальный идентификатор чата
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Максимальное количество сообщений для возврата
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Смещение для пагинации сообщений
      responses:
        '200':
          description: Список сообщений успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Необходима аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Пользователь не имеет доступа к этому чату
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Чат не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRegistrationRequest:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
        - city
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: StrongPassword123
        first_name:
          type: string
          maxLength: 50
          example: Иван
        last_name:
          type: string
          maxLength: 50
          example: Иванов
        phone_number:
          type: string
          pattern: '^\+?[0-9]{10,15}$'
          example: "+71234567890"
        city:
          type: string
          example: Москва
        neighbourhood:
          type: string
          example: ЦАО
        street:
          type: string
          example: Тверская
        house_number:
          type: integer
          example: 10

    UserRegistrationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        email:
          type: string
          format: email
          example: user@example.com
        first_name:
          type: string
          example: Иван
        last_name:
          type: string
          example: Иванов
        registered_at:
          type: string
          format: date-time
          example: "2024-04-30T14:48:00.000Z"
        phone_number:
          type: string
          example: "+71234567890"
        city:
          type: string
          example: Москва
        neighbourhood:
          type: string
          example: ЦАО
        street:
          type: string
          example: Тверская
        house_number:
          type: integer
          example: 10

    PetSitterCreateRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        description:
          type: string
          example: "Опытный опекун с 5-летним стажем."
        price:
          type: number
          format: decimal
          example: 1500
        animal_types:
          type: array
          items:
            $ref: '#/components/schemas/animal_type'

    PetSitterUpdateRequest:
      type: object
      properties:
        description:
          type: string
          example: "Обновленное описание опекуна."
        price:
          type: number
          format: decimal
          example: 1600.75
        animal_types:
          type: array
          items:
            $ref: '#/components/schemas/animal_type'

    PetSitterResponse:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        rating:
          type: integer
          format: decimal
          minimum: 1
          maximum: 5
          example: 5
        description:
          type: string
          example: "Опытный опекун с 5-летним стажем."
        price:
          type: number
          format: decimal
          example: 1500
        animal_types:
          type: array
          items:
            $ref: '#/components/schemas/animal_type'

    AnimalCreateRequest:
      type: object
      required:
        - nickname
        - animal_type
        - sex
      properties:
        nickname:
          type: string
          maxLength: 256
          example: "Бобик"
        description:
          type: string
          maxLength: 1000
          example: "Очень дружелюбный и игривый."
        photos:
          type: array
          items:
            type: string
            format: uri
            example: "https://example.com/photos/bobik1.jpg"
        animal_type:
          $ref: '#/components/schemas/animal_type'
        sex:
          $ref: '#/components/schemas/sex'
        age:
          type: integer
          example: 3
        diet:
          type: array
          items:
            $ref: '#/components/schemas/diet'
        physical_activity:
          type: array
          items:
            $ref: '#/components/schemas/physical_activity'
        contact_with_others:
          type: array
          items:
            $ref: '#/components/schemas/contact_with_other'
        care:
          type: array
          items:
            $ref: '#/components/schemas/care'
        treatment:
          type: array
          items:
            $ref: '#/components/schemas/treatment'
        treats:
          type: array
          items:
            $ref: '#/components/schemas/treats'
        walk:
          type: array
          items:
            $ref: '#/components/schemas/walk'
        feeding_time:
          $ref: '#/components/schemas/feeding_time'

    AnimalUpdateRequest:
      type: object
      properties:
        nickname:
          type: string
          maxLength: 256
          example: "Бобик Updated"
        description:
          type: string
          maxLength: 1000
          example: "Обновленное описание."
        photos:
          type: array
          items:
            type: string
            format: uri
            example: "https://example.com/photos/bobik2.jpg"
        animal_type:
          $ref: '#/components/schemas/animal_type'
        sex:
          $ref: '#/components/schemas/sex'
        age:
          type: integer
          example: 4
        diet:
          type: array
          items:
            $ref: '#/components/schemas/diet'
        physical_activity:
          type: array
          items:
            $ref: '#/components/schemas/physical_activity'
        contact_with_others:
          type: array
          items:
            $ref: '#/components/schemas/contact_with_other'
        care:
          type: array
          items:
            $ref: '#/components/schemas/care'
        treatment:
          type: array
          items:
            $ref: '#/components/schemas/treatment'
        treats:
          type: array
          items:
            $ref: '#/components/schemas/treats'
        walk:
          type: array
          items:
            $ref: '#/components/schemas/walk'
        feeding_time:
          $ref: '#/components/schemas/feeding_time'

    AnimalResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        user_id:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        rating:
          type: integer
          format: decimal
          minimum: 1
          maximum: 5
          example: 5
        nickname:
          type: string
          example: "Бобик"
        description:
          type: string
          example: "Очень дружелюбный и игривый."
        photos:
          type: array
          items:
            type: string
            format: uri
            example: "https://example.com/photos/bobik1.jpg"
        animal_type:
          $ref: '#/components/schemas/animal_type'
        sex:
          $ref: '#/components/schemas/sex'
        age:
          type: integer
          example: 3
        diet:
          type: array
          items:
            $ref: '#/components/schemas/diet'
        physical_activity:
          type: array
          items:
            $ref: '#/components/schemas/physical_activity'
        contact_with_others:
          type: array
          items:
            $ref: '#/components/schemas/contact_with_other'
        care:
          type: array
          items:
            $ref: '#/components/schemas/care'
        treatment:
          type: array
          items:
            $ref: '#/components/schemas/treatment'
        treats:
          type: array
          items:
            $ref: '#/components/schemas/treats'
        walk:
          type: array
          items:
            $ref: '#/components/schemas/walk'
        feeding_time:
          $ref: '#/components/schemas/feeding_time'

    PetHoldingCardCreateRequest:
      type: object
      required:
        - animal_id
        - reporting_frequency
      properties:
        animal_id:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        start_of_holding_period:
          type: string
          format: date-time
          example: "2024-05-01T09:00:00Z"
        end_of_holding_period:
          type: string
          format: date-time
          example: "2024-05-10T18:00:00Z"
        reporting_frequency:
          $ref: '#/components/schemas/reporting_frequency'

    PetHoldingCardUpdateRequest:
      type: object
      properties:
        start_of_holding_period:
          type: string
          format: date-time
          example: "2024-05-02T09:00:00Z"
        end_of_holding_period:
          type: string
          format: date-time
          example: "2024-05-12T18:00:00Z"
        reporting_frequency:
          $ref: '#/components/schemas/reporting_frequency'

    PetHoldingCardResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "e290f1ee-6c54-4b01-90e6-d701748f0852"
        animal_id:
          type: string
          format: uuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        start_of_holding_period:
          type: string
          format: date-time
          example: "2024-05-01T09:00:00Z"
        end_of_holding_period:
          type: string
          format: date-time
          example: "2024-05-10T18:00:00Z"
        reporting_frequency:
          $ref: '#/components/schemas/reporting_frequency'

    PetHoldingCardDetailedResponse:
      type: object
      properties:
        pet_holding_card:
          $ref: '#/components/schemas/PetHoldingCardResponse'
        animal:
          $ref: '#/components/schemas/AnimalResponse'
        owner:
          $ref: '#/components/schemas/PetSitterResponse'

    BookingCreateRequest:
      type: object
      required:
        - holding_card_id
        - sitter_id
        - start_time
        - end_time
      properties:
        holding_card_id:
          type: string
          format: uuid
          example: "e290f1ee-6c54-4b01-90e6-d701748f0852"
        sitter_id:
          type: string
          format: uuid
          example: "4fa85f64-5717-4562-b3fc-2c963f66afa7"
        start_time:
          type: string
          format: date-time
          example: "2024-06-01T10:00:00Z"
        end_time:
          type: string
          format: date-time
          example: "2024-06-05T18:00:00Z"

    BookingResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "f290f1ee-6c54-4b01-90e6-d701748f0853"
        holding_card_id:
          type: string
          format: uuid
          example: "e290f1ee-6c54-4b01-90e6-d701748f0852"
        sitter_id:
          type: string
          format: uuid
          example: "4fa85f64-5717-4562-b3fc-2c963f66afa7"
        start_time:
          type: string
          format: date-time
          example: "2024-06-01T10:00:00Z"
        end_time:
          type: string
          format: date-time
          example: "2024-06-05T18:00:00Z"
        status:
          type: string
          enum:
            - Подтверждено
            - Ожидает подтверждения
            - Отменено
          example: "Ожидает подтверждения"

    BookingDetailedResponse:
      type: object
      properties:
        booking:
          $ref: '#/components/schemas/BookingResponse'
        pet_holding_card:
          $ref: '#/components/schemas/PetHoldingCardResponse'
        animal:
          $ref: '#/components/schemas/AnimalResponse'
        owner:
          $ref: '#/components/schemas/PetSitterResponse'

    ReviewCreateRequest:
      type: object
      required:
        - booking_id
        - rating
        - comment
      properties:
        booking_id:
          type: string
          format: uuid
          example: "f290f1ee-6c54-4b01-90e6-d701748f0853"
        rating:
          type: integer
          format: decimal
          minimum: 1
          maximum: 5
          example: 5
        comment:
          type: string
          maxLength: 1000
          example: "Отличный опекун! Заботился о моем питомце очень хорошо."

    ReviewResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "g290f1ee-6c54-4b01-90e6-d701748f0854"
        booking_id:
          type: string
          format: uuid
          example: "f290f1ee-6c54-4b01-90e6-d701748f0853"
        reviewer_id:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        reviewee_id:
          type: string
          format: uuid
          example: "4fa85f64-5717-4562-b3fc-2c963f66afa7"
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        comment:
          type: string
          example: "Отличный опекун! Заботился о моем питомце очень хорошо."
        created_at:
          type: string
          format: date-time
          example: "2024-06-06T12:34:56.789Z"

    ReviewDetailedResponse:
      type: object
      properties:
        review:
          $ref: '#/components/schemas/ReviewResponse'
        booking:
          $ref: '#/components/schemas/BookingResponse'
        pet_holding_card:
          $ref: '#/components/schemas/PetHoldingCardResponse'
        animal:
          $ref: '#/components/schemas/AnimalResponse'
        owner:
          $ref: '#/components/schemas/PetSitterResponse'

    ChatCreateRequest:
      type: object
      required:
        - recipient_id
      properties:
        recipient_id:
          type: string
          format: uuid
          example: "4fa85f64-5717-4562-b3fc-2c963f66afa7"

    ChatResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c290f1ee-6c54-4b01-90e6-d701748f0855"
        first_user_id:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        second_user_id:
          type: string
          format: uuid
          example: "4fa85f64-5717-4562-b3fc-2c963f66afa7"
        created_at:
          type: string
          format: date-time
          example: "2024-07-01T10:00:00Z"

    MessageResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "m290f1ee-6c54-4b01-90e6-d701748f0856"
        sender_id:
          type: string
          format: uuid
          example: "c290f1ee-6c54-4b01-90e6-d701748f0855"
        text:
          type: string
          maxLength: 1000
          example: "Привет! Как дела?"
        sent_at:
          type: string
          format: date-time
          example: "2024-07-01T10:05:00Z"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Пользователь с таким email уже существует."

    # Перечисления
    animal_type:
      type: string
      enum:
        - собака
        - кошка
        - кролик
        - птица
        - ежик
        - грызуны
        - рыбы
        - рептилии
        - фреткии
        - другие

    sex:
      type: string
      enum:
        - Мужской
        - Женский

    reporting_frequency:
      type: string
      enum:
        - каждый день
        - раз в 2 дня
        - раз в 3 дня
        - каждую неделю
        - в последний день передержки
        - не нужна

    recipient_type:
      type: string
      enum:
        - Владелец
        - Опекун

    diet:
      type: string
      enum:
        - Сухой корм
        - Мокрый корм
        - Домашняя еда
        - Специальная диета
        - Никаких лакомств

    physical_activity:
      type: string
      enum:
        - Ежедневные прогулки
        - Активные игры
        - Пробежки
        - Минимальная активность
        - Игры на свежем воздухе
        - Без прогулок

    contact_with_other:
      type: string
      enum:
        - Высокий уровень общения
        - Минимальный контакт с людьми
        - Отсутствие других животных
        - Контакт с детьми

    care:
      type: string
      enum:
        - Регулярное вычесывание
        - Купание
        - Стрижка когтей
        - Чистка ушей
        - Уход за шерстью
        - Чистка зубов
        - Чистка глаз

    treatment:
      type: string
      enum:
        - Ежедневный прием лекарств
        - Инъекции
        - Витамины
        - Антиаллергены

    treats:
      type: string
      enum:
        - Овощи и фрукты
        - Специальные лакомства
        - Лакомства запрещены
        - Домашние лакомства

    walk:
      type: string
      enum:
        - Игры с мячом
        - Погоня за игрушками
        - Прятки
        - Минимум активности
        - Контактные игры

    feeding_time:
      type: string
      enum:
        - Утро
        - День
        - Вечер
        - Ночные кормления
        - Свободный доступ к еде

  securitySchemes:
    SessionIdAuth:
      type: apiKey
      in: query
      name: sessionId
      description: Используется для аутентификации пользователя

tags:
  - name: Аутентификация
    description: Операции, связанные с регистрацией и аутентификацией пользователей
  - name: Пользователи
    description: Управление пользователями и их ролями
  - name: Питомцы
    description: Управление питомцами
  - name: Карточки передержки
    description: Управление карточками передержки животных
  - name: Бронирования
    description: Управление бронированиями
  - name: Отзывы
    description: Управление отзывами
  - name: Чаты
    description: Управление чатами и сообщениями
